# Importando scripts
import scripts.calc_functions  as CF # Fun√ß√µes de c√°lculo
import scripts.basic_functions as BF # Fun√ß√µes basicas

# Importando bibliotecas
from rich.console import Console # Adicionando a fun√ß√£o de console da biblioteca
console = Console()

from rich.traceback import install # Adicionando uma melhor menssagem de erro pela biblioteca
install()

from rich.markdown import Markdown # Adicionando suporte a Markdown pela biblioteca

# Construindo t√≠tulo e rodap√© do programa usando Markdown
title = '# üî• CALCULADORA BIN√ÅRIA üî•'
mdtitle = Markdown(title)

footer = '# üî• FIM DO PROGRAMA üî•'
mdfooter = Markdown(footer)

# Fun√ß√£o principal
def app():
    # Op√ß√£o de defini√ß√£o de quantidade de bits pelo usu√°rio
    console.print(f'\n[bold][cyan]| ü§ì Quantos bits voc√™ deseja usar para o c√°lculo? [italic][orange1](O valor padr√£o √© 8 bits)[/][/][/]')
    bit_length = console.input((f'\n[bold][cyan]| : [/][/]'))

    bit_length = bit_length if bit_length else "8"
    bit_lenght_logic_value = BF.bit_length_check(bit_length)

    if bit_lenght_logic_value: # Valida se a quantidade de bits escolhida
        while bit_lenght_logic_value:
            console.print(f'\n[bold][red]| üòï [underline]Quantidade de bits inv√°lida! Por favor, digite outro valor.[/][/][/]')
            bit_length = console.input((f'\n[bold][cyan]| : [/][/]'))

            bit_length = bit_length if bit_length else "8"
            bit_lenght_logic_value = BF.bit_length_check(bit_length)

    # Op√ß√£o de multipla escolha entre os tipos de c√°lculos
    console.print(f'\n[bold][cyan]| ü§ì Qual o tipo de c√°lculo voc√™ deseja? [italic][orange1](Digite o n√∫mero correspondente a op√ß√£o desejada)[/][/][/]')
    choice = console.input((f'\n[bold][cyan][orange1]| 1. Adi√ß√£o\n| 2. Subtra√ß√£o\n| 3. Multiplica√ß√£o\n\n[/]| : [/][/]'))

    mult_ch_logic_value = BF.multiple_choice_logic(choice)

    if mult_ch_logic_value: # Valida a op√ß√£o de escolha do usu√°rio
        while mult_ch_logic_value:
            console.print(f'\n[bold][red]| üòï [underline]Escolha inv√°lida! Por favor, tente novamente.[/][/][/]')
            choice = console.input((f'\n[bold][cyan][orange1]| 1. Adi√ß√£o\n| 2. Subtra√ß√£o\n| 3. Multiplica√ß√£o\n\n[/]| : [/][/]'))
            mult_ch_logic_value = BF.multiple_choice_logic(choice)

    choice = int(choice)
    msg = ['Adi√ß√£o', 'Subtra√ß√£o', 'Multiplica√ß√£o'] # Mensagem da op√ß√£o escolhida

    console.print(f'\n[bold][orange1]| [ {msg[choice - 1]} ][/][/]') # Escolha da mensagem com base na escolha do usu√°rio

    # Lendo os n√∫meros obtidos pelo usu√°rio
    first_num = console.input(f'\n[bold][cyan]| Digite o primeiro n√∫mero: [/][/]')
    second_num = console.input(f'\n[bold][cyan]| Digite o segundo n√∫mero: [/][/]')

    # Verifica se os n√∫meros s√£o v√°lidos
    if not BF.is_binary(first_num) or not BF.is_binary(second_num):
        while not BF.is_binary(first_num) or not BF.is_binary(second_num):
            console.print(f'\n[bold][red]| üòï [underline]N√∫mero inv√°lido! Por favor, digite outro n√∫mero.[/][/][/]')
            first_num = console.input(f'\n[bold][cyan]| Digite o primeiro n√∫mero: [/][/]')
            second_num = console.input(f'\n[bold][cyan]| Digite o segundo n√∫mero: [/][/]')

    # L√≥gica de escolha do tipo de c√°lculo
    match choice:
        case 1:
            CF.binary_calculation_BA(first_num, second_num, 1, bit_length)
        case 2:
            CF.binary_calculation_BA(first_num, second_num, 2, bit_length)
        case 3:
            CF.binary_calculation_BA(first_num, second_num, 3, bit_length)

# In√≠cio do programa
if __name__ == "__main__":
    # T√≠tulo do programa
    console.print(mdtitle, '\n')

    choice = "S" # Declarando vari√°vel de escolha
    
    while choice == "S": # La√ßo de repeti√ß√£o do programa
        app()

        choice = console.input(f"[bold][cyan]| ü§î Gostaria de realizar outro c√°lculo? [italic][orange1](S/N)\n\n[/][/]| : ").upper()
        controller = BF.multiple_choice_YN(choice)

        if controller: # Valida se a op√ß√£o escolhida pelo usu√°rio
            while controller:
                console.print(f'\n[bold][red]| üòï [underline]Escolha inv√°lida! Por favor, tente novamente.[/][/][/]')
                choice = console.input(f"\n[bold][cyan]| ü§î Gostaria de realizar outro c√°lculo? [italic][orange1](S/N)\n\n[/][/]| : ").upper()
                controller = BF.multiple_choice_YN(choice)
                
    # Program footer
    console.print('\n', mdfooter)
