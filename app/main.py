# ========================
# IMPORTA√á√ïES
# ========================

# Scripts internos
import scripts.calc_functions  as CF  # Fun√ß√µes de c√°lculo
import scripts.basic_functions as BF  # Fun√ß√µes b√°sicas

# Bibliotecas externas
from rich.console import Console       # Console estilizado
from rich.traceback import install     # Traceback detalhado
from rich.markdown import Markdown     # Suporte a Markdown

# ========================
# CONFIGURA√á√ÉO
# ========================

console = Console()
install()

# Markdown de t√≠tulo e rodap√©
title = '# üî• CALCULADORA BIN√ÅRIA üî•'
mdtitle = Markdown(title)

footer = '# üî• FIM DO PROGRAMA üî•'
mdfooter = Markdown(footer)

# ========================
# FUN√á√ÉO PRINCIPAL
# ========================

def app():
    # ------------------------
    # Solicita a quantidade de bits
    # ------------------------
    console.print(
        f'\n[bold][cyan]| ü§ì Quantos bits voc√™ deseja usar para o c√°lculo? [italic][orange1](O valor padr√£o √© 8 bits)[/][/][/]'
    )
    bit_length = console.input(f'\n[bold][cyan]| : [/][/]') or "8"
    bit_lenght_logic_value = BF.bit_length_check(bit_length)

    while bit_lenght_logic_value:
        console.print(f'\n[bold][red]| üòï [underline]Quantidade de bits inv√°lida! Por favor, digite outro valor.[/][/][/]')
        bit_length = console.input(f'\n[bold][cyan]| : [/][/]') or "8"
        bit_lenght_logic_value = BF.bit_length_check(bit_length)

    # ------------------------
    # Escolha do tipo de c√°lculo
    # ------------------------
    console.print(
        f'\n[bold][cyan]| ü§ì Qual o tipo de c√°lculo voc√™ deseja? [italic][orange1](Digite o n√∫mero correspondente a op√ß√£o desejada)[/][/][/]'
    )
    choice = console.input(
        f'\n[bold][cyan][orange1]| 1. Adi√ß√£o\n| 2. Subtra√ß√£o\n| 3. Multiplica√ß√£o\n\n[/]| : [/][/]'
    )
    mult_ch_logic_value = BF.multiple_choice_logic(choice)

    while mult_ch_logic_value:
        console.print(f'\n[bold][red]| üòï [underline]Escolha inv√°lida! Por favor, tente novamente.[/][/][/]')
        choice = console.input(
            f'\n[bold][cyan][orange1]| 1. Adi√ß√£o\n| 2. Subtra√ß√£o\n| 3. Multiplica√ß√£o\n\n[/]| : [/][/]'
        )
        mult_ch_logic_value = BF.multiple_choice_logic(choice)

    choice = int(choice)
    msg = ['Adi√ß√£o', 'Subtra√ß√£o', 'Multiplica√ß√£o']
    console.print(f'\n[bold][orange1]| [ {msg[choice - 1]} ][/][/]')

    # ------------------------
    # Leitura dos n√∫meros bin√°rios
    # ------------------------
    first_num  = console.input(f'\n[bold][cyan]| Digite o primeiro n√∫mero: [/][/]')
    second_num = console.input(f'\n[bold][cyan]| Digite o segundo n√∫mero: [/][/]')

    while not BF.is_binary(first_num) or not BF.is_binary(second_num):
        console.print(f'\n[bold][red]| üòï [underline]N√∫mero inv√°lido! Por favor, digite outro n√∫mero.[/][/][/]')
        first_num  = console.input(f'\n[bold][cyan]| Digite o primeiro n√∫mero: [/][/]')
        second_num = console.input(f'\n[bold][cyan]| Digite o segundo n√∫mero: [/][/]')

    # ------------------------
    # Chamada da fun√ß√£o de c√°lculo
    # ------------------------
    CF.binary_calculation_BA(first_num, second_num, choice, bit_length)

# ========================
# EXECU√á√ÉO PRINCIPAL
# ========================

if __name__ == "__main__":
    console.print(mdtitle, '\n')

    choice = "S"
    while choice == "S":
        app()

        choice = console.input(
            f"[bold][cyan]| ü§î Gostaria de realizar outro c√°lculo? [italic][orange1](S/N)\n\n[/][/]| : "
        ).upper()

        controller = BF.multiple_choice_YN(choice)

        while controller:
            console.print(f'\n[bold][red]| üòï [underline]Escolha inv√°lida! Por favor, tente novamente.[/][/][/]')
            choice = console.input(
                f"\n[bold][cyan]| ü§î Gostaria de realizar outro c√°lculo? [italic][orange1](S/N)\n\n[/][/]| : "
            ).upper()
            controller = BF.multiple_choice_YN(choice)

    console.print('\n', mdfooter)
